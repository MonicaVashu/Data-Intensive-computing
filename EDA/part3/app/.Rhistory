sliderInput("num_colors",
label = "Number of colors:",
min = 1,
max = 9,
value = 7),
selectInput("select",
label = "Select Demographic:",
choices = colnames(map_data)[1:2],
selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")),
tabPanel(title = 'Data Table',
dataTableOutput(outputId = 'table'))))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("num_colors",
label = "Number of colors:",
min = 1,
max = 9,
value = 7),
selectInput("select",
label = "Select Demographic:",
choices = colnames(map_data)[1:2],
selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")),
tabPanel(title = 'Data Table',
dataTableOutput(outputId = 'table'))))))
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("num_colors",
label = "Number of colors:",
min = 1,
max = 9,
value = 7),
selectInput("select",
label = "Select Demographic:",
choices = colnames(map_data)[1:2],
selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")),
tabPanel(title = 'Data Table',
dataTableOutput(outputId = 'table'))))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("num_colors",
label = "Number of colors:",
min = 1,
max = 9,
value = 7),
selectInput("select",
label = "Select Demographic:",
choices = colnames(map_data)[1:2],
selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("num_colors",
label = "Number of colors:",
min = 1,
max = 9,
value = 7),
selectInput("select",
label = "Select Demographic:",
choices = colnames(map_data)[1:2],
selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
# sidebarLayout(
#   sidebarPanel(width = 3,
#                sliderInput("num_colors",
#                            label = "Number of colors:",
#                            min = 1,
#                            max = 9,
#                            value = 7),
#                selectInput("select",
#                            label = "Select Demographic:",
#                            choices = colnames(map_data)[1:2],
#                            selected = 1)),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
# map_data$value = map_data[, 1:2]
# state_choropleth(map_data,
#                  title = colnames(map_data)[2],
#                  num_colors = 7)
# map_data$value = map_data[, input$select]
#
# state_choropleth(map_data,
#                    title = input$select,
#                    num_colors = input$num_colors)
})
# output$table <- renderDataTable({
#
#   map_data[order(map_data[input$select]), ]
# })
}
shinyApp(ui, server)
install.packages("rsconnect")
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
x
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
x
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
x
options(rsconnect.max.bundle.size=3145728000)
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
x
<script src="https://gist.github.com/MonicaVashu/90675ef83bdc276b5b6715782fbd4433.js"></script>
runGist("90675ef83bdc276b5b6715782fbd4433")
runGist("90675ef83bdc276b5b6715782fbd4433")
getwd()
runGist("90675ef83bdc276b5b6715782fbd4433")
library(shiny)
library(shinythemes)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(maptools)
library(ggpubr)
dt<-read.csv("fluKeywordCleanData2.csv")
# us<-map_data("state")
flu_data <- data.frame(STATENAME=dt$State)
occurences <- data.frame(table(unlist(flu_data)))
occurences$Var1 <- tolower(occurences$Var1)
# Reference: https://rstudio-pubs-static.s3.amazonaws.com/292287_894b2591571b4acdab51269e04f45125.html
map_data <- occurences
ui <- fluidPage(title = 'My First App!',
theme = shinythemes::shinytheme('flatly'),
mainPanel(width = 9,
tabsetPanel(
tabPanel(title = 'Output Map',
plotOutput(outputId = "map")))))
server <- function(input, output) {
output$map <- renderPlot({
statelabel <- map_data
colnames(statelabel) <- c("region", "value")
statelabel$value <- as.numeric(statelabel$value)
statelabel$region <- tolower(statelabel$region)
#statelabel$region <- gsub(" (u.s. state)", "", statelabel$region, fixed=TRUE)
state_choropleth(statelabel, title = "CDC Map", num_colors = 7)
})
}
x<-shinyApp(ui, server)
x
runApp('app')
runApp('app')
