flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg3 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg3 <- gg3+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg3 <- gg3+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg3 <- gg3+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
dt<-read.csv("StateDataforMap_2018-19week4.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg4 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg4 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg4 <- gg4+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg4 <- gg4+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg4 <- gg4+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
plot_list = list(gg1,gg2,gg3,gg4)
ggarrange(plotlist=plot_list, widths = c(2,2), labels = c("Week1", "Week2", "Week3", "Week4"))
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 5)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg1
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 3)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg1
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 3)))+theme(plot.title = element_text(size = 3, face = "bold"), legend.title=element_text(size=3), legend.text=element_text(size=3))
gg1
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 1)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg1
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 1)))
gg1
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 1)))
gg1
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 0.25)))
gg1
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 1)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg1
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg1
# Heatmap
library(ggplot2)
library(usmap)
library(dplyr)
library("ggpubr")
dt<-read.csv("StateDataforMap_2018-19week1.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
#gg1 <- gg1+ theme(legend.text=element_text(size=7))
gg1 <- gg1+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
dt<-read.csv("StateDataforMap_2018-19week2.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg2 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg2 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg2 <- gg2+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg2 <- gg2+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg2 <- gg2+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
dt<-read.csv("StateDataforMap_2018-19week3.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg3 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg3 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg3 <- gg3+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg3 <- gg3+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg3 <- gg3+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
dt<-read.csv("StateDataforMap_2018-19week4.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg4 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg4 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg4 <- gg4+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg4 <- gg4+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg4 <- gg4+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
plot_list = list(gg1,gg2,gg3,gg4)
ggarrange(plotlist=plot_list, widths = c(2,2), labels = c("Week1", "Week2", "Week3", "Week4"))
# Heatmap
library(ggplot2)
library(usmap)
library(dplyr)
library("ggpubr")
dt<-read.csv("StateDataforMap_2018-19week4.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg4 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg4 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg4 <- gg4+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg4 <- gg4+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
gg4 <- gg4+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg4
# Heatmap
library(ggplot2)
library(usmap)
library(dplyr)
library("ggpubr")
dt<-read.csv("StateDataforMap_2018-19week4.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg4 <- ggplot()
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg4 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
gg4 <- gg4+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg4 <- gg4+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
#gg4 <- gg4+guides(shape = guide_legend(override.aes = list(size = 0.25)))+theme(plot.title = element_text(size = 6, face = "bold"), legend.title=element_text(size=6), legend.text=element_text(size=6))
gg4
install.packages('rsconnect')
rsconnect::setAccountInfo(name='vaidehidhr', token='C7C32E6A18FF5EE0A2D9414E12BBB31C', secret='QzTzl8LmoJ/DZYz5QvXeEmduqqNLWF1sSTLe9U72')
library(rsconnect)
source("heatmap_with_function.R", local = TRUE)
source("heatmap_with_function.R", local = TRUE)
source("heatmap_with_function.R", local = TRUE)
myfunction <- function(){
dt<-read.csv("StateDataforMap_2018-19week1.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
return(gg1)
}
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(shiny)
source("heatmap_with_function.R", local = TRUE)
myfunction <- function(){
dt<-read.csv("StateDataforMap_2018-19week1.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
return(gg1)
}
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(shiny)
source("heatmap_with_function.R", local = TRUE)
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(shiny)
source("heatmap_with_function.R", local = TRUE)
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
# Heatmap
library(ggplot2)
library(usmap)
library(dplyr)
library("ggpubr")
myfunction <- function(){
dt<-read.csv("StateDataforMap_2018-19week4.csv")
flu_data <- data.frame(state=dt$STATENAME, ACTIVITY.LEVEL = dt$ACTIVITY.LEVEL, ACTIVITY.LEVEL.LABEL = dt$ACTIVITY.LEVEL.LABEL)
gg1 <- ggplot()
# Reference: https://stackoverflow.com/questions/37912418/how-does-geom-map-map-id-function-work
flu_data$state <- tolower(flu_data$state)
flu_data$ACTIVITY.LEVEL <- as.character(flu_data$ACTIVITY.LEVEL)
flu_data$ACTIVITY.LEVEL[flu_data$ACTIVITY.LEVEL == "Level 10"] <- "Level 90"
gg1 <- plot_usmap(data = flu_data, values = "ACTIVITY.LEVEL", lines = "black")
# Reference: https://jabranham.com/blog/2016/03/ggplot-maps/
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1 <- gg1+ scale_fill_manual(breaks = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 90"),
values = c("#00C200", "#5BF700", "#8CF700", "#BAF700", "#E0F500", "#F7DF00", "#FCB100", "#FC8200", "#FA4F00", "#CC0000"),
labels = c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10"),
name = "ILI Activity Level")
return(gg1)
}
gg1<- myfunction()
library(shiny)
source("heatmap_with_function.R", local = TRUE)
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(shiny)
source("heatmap_with_function.R", local = TRUE)
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(shiny)
source("heatmap_with_function.R", local = TRUE)
runApp(shinyApp(
ui = fluidPage(
plotOutput("plot1", click = "plot_click")
),
server = function(input, output, session) {
output$plot1 <- renderPlot({
myfunction()
})
}
))
library(ggplot2)
library(dplyr)
library("ggpubr")
dt<-read.csv("influenzaKeywordCleanData.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
gg1 <- ggplot()
gg1 <- plot_usmap(data = occurences, values = "Freq", lines = "black")
library(ggplot2)
library(dplyr)
library("ggpubr")
dt<-read.csv("influenzaKeywordCleanData.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
input_data <- data.frame(state=occurences$Var1, Freq = occurences$Freq)
gg1 <- ggplot()
gg1 <- plot_usmap(data = input_data, values = "Freq", lines = "black")
#occurences$Freq <- as.character(occurences$Freq)
# gg1 <- gg1 + geom_map(data=occurences, map=us,
#                       aes(fill=Freq,
#                           map_id=Var1),
#                       color="black", size=0.15)
#t <- max(occurences$Freq, na.rm = TRUE)
#gg1 <- gg1 + scale_color_gradient(low="green", high="red")
gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,18,36,54,72,90), limits=c(0,90))
#gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,30,60,90), limits=c(0,t))
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1
dt<-read.csv("fluKeywordCleanData2.csv")
flu_data <- data.frame(state=dt$State)
dt<-read.csv("fluKeywordCleanData2.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
input_data <- data.frame(state=occurences$Var1, Freq = occurences$Freq)
gg2 <- ggplot()
gg2 <- plot_usmap(data = input_data, values = "Freq", lines = "black"))
#t <- max(occurences$Freq, na.rm = TRUE)
#gg2 <- gg2 + scale_color_gradient(low="green", high="red")
gg2 <- gg2 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,85,170,255,340,424), limits=c(0,424))
#gg2 <- gg2 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,30,60,90), limits=c(0,t))
gg2 <- gg2+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg2
dt<-read.csv("fluKeywordCleanData2.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
input_data <- data.frame(state=occurences$Var1, Freq = occurences$Freq)
gg2 <- ggplot()
gg2 <- plot_usmap(data = input_data, values = "Freq", lines = "black")
#t <- max(occurences$Freq, na.rm = TRUE)
#gg2 <- gg2 + scale_color_gradient(low="green", high="red")
gg2 <- gg2 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,85,170,255,340,424), limits=c(0,424))
#gg2 <- gg2 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,30,60,90), limits=c(0,t))
gg2 <- gg2+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg2
library(ggplot2)
library(dplyr)
library("ggpubr")
dt<-read.csv("fluORInfluenzaKeywordCleanData.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
input_data <- data.frame(state=occurences$Var1, Freq = occurences$Freq)
gg1 <- ggplot()
gg1 <- plot_usmap(data = input_data, values = "Freq", lines = "black")
#t <- max(occurences$Freq, na.rm = TRUE)
#gg1 <- gg1 + scale_color_gradient(low="green", high="red")
gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,87,174,261,348, 434), limits=c(0,434))
#gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,30,60,90), limits=c(0,t))
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1
library(ggplot2)
library(dplyr)
library("ggpubr")
dt<-read.csv("fluORInfluenzaKeywordCleanData.csv")
flu_data <- data.frame(state=dt$State)
flu_data$state <- tolower(flu_data$state)
occurences <- data.frame(table(unlist(flu_data)))
input_data <- data.frame(state=occurences$Var1, Freq = occurences$Freq)
gg1 <- ggplot()
gg1 <- plot_usmap(data = input_data, values = "Freq", lines = "black")
#t <- max(occurences$Freq, na.rm = TRUE)
#gg1 <- gg1 + scale_color_gradient(low="green", high="red")
gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,87,174,261,348, 434), limits=c(0,434))
#gg1 <- gg1 + scale_fill_gradientn(colours = c("green","greenyellow", "yellow", "gold", "orange","orangered", "red2"),breaks = c(0,30,60,90), limits=c(0,t))
gg1 <- gg1+theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())+
theme(panel.background = element_rect(fill = 'white'))
gg1
names(tags)
library(shiny)
shinyUI(
fluidPage(
headerPanel("Shiny App Example with Video and Image"),
sidebarLayout(
sidebarPanel(
fileInput("file","Upload the file", multiple = T), # fileinput() function is used to get the file upload contorl option
h6("Default max. file size is 5MB"),
hr(),
h5("Select the read.table parameters below"),
checkboxInput(inputId = 'header', label = 'Header', value = FALSE),
checkboxInput(inputId = "stringAsFactors", "stringAsFactors", FALSE),
br(),
radioButtons(inputId = 'sep', label = 'Separator', choices = c(Comma=',',Semicolon=';',Tab='\t', Space=''), selected = ','),
h6(" Powered by:"),
tags$img(src='2_influenzakeywordcleandata.png', height=50, width=50)
),
mainPanel(
uiOutput("tb")
# use below code if you want the tabset programming in the main panel. If so, then tabset will appear when the app loads for the first time.
#       tabsetPanel(tabPanel("Summary", verbatimTextOutput("sum")),
#                   tabPanel("Data", tableOutput("table")))
)
)
))
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
install.packages("XML")
remove.packages("XML")
install.packages("XML", dependencies = TRUE)
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('C:/My_folder/Padhai/DIC/Labs/Lab1/Part3')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
